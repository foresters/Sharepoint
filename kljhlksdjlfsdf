using System;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Collections;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Workflow.ComponentModel.Compiler;
using System.Workflow.ComponentModel.Serialization;
using System.Workflow.ComponentModel;
using System.Workflow.ComponentModel.Design;
using System.Workflow.Runtime;
using System.Workflow.Activities;
using System.Workflow.Activities.Rules;
using Microsoft.SharePoint;
using Microsoft.SharePoint.Workflow;
using Microsoft.SharePoint.WorkflowActions;

namespace TransportSystem.TicketWorkflow
{
    public sealed partial class TicketWorkflow : SequentialWorkflowActivity
    {
        #region Properties
        public Guid workflowId = default(System.Guid);
        public SPWorkflowActivationProperties workflowProperties = new SPWorkflowActivationProperties();
        /// <summary>
        /// Gets ConnectionString for UniCon database
        /// </summary>
        private string UniConConnectionString
        {
            get
            {
                return ConfigurationManager.ConnectionStrings["UniConConnectionString"].ConnectionString;
            }
        }
        #endregion
        public TicketWorkflow()
        {
            InitializeComponent();
        }
        private void onWorkflowActivated1_Invoked(object sender, ExternalDataEventArgs e)
        {
            //Getting moving file
            SPFile movingFile;
            using (SPSite mySite = new SPSite(workflowProperties.SiteUrl))
            {
                SPWeb myWeb = mySite.OpenWeb();
                movingFile = myWeb.GetFile(workflowProperties.ItemUrl);
                // Reading Region code
                string recipientCode = "";
                if (IsCorrectFileName(movingFile.Name))
                {
                    // Tickets
                    if (movingFile.Name.Substring(23, 1) == "1")
                    {
                        if (movingFile.OpenBinaryStream().Length > 25)
                        {
                            string movingPackageFileName = (new StreamReader(movingFile.OpenBinaryStream())).ReadLine();
                            recipientCode = movingPackageFileName.Substring(5, 4);
                                
                            string districtName = GetDistrictName(recipientCode);
                            string debugLine = "0";
                            if (!string.IsNullOrEmpty(districtName) && districtName != "")
                            {
                                try
                                {
                                    debugLine = "1";
                                    movingFile.MoveTo(FormatTicketURL(myWeb.Url, recipientCode, districtName, movingFile.Name), true);
                                    debugLine = "2";
                                    SPFile packageFile = movingFile.ParentFolder.ParentFolder.SubFolders["Вхідні"].Files[FormatPackageURL(myWeb.Url, recipientCode, districtName, movingPackageFileName)];
                                    debugLine = "3";
                                    packageFile.MoveTo(FormatPackageURL(myWeb.Url, recipientCode, districtName, packageFile.Name, true), true);
                                    debugLine = "4";
                                    packageFile.AddProperty("Статус", "Завантажений");
                                    packageFile.AddProperty("Статус меню", "Варіант 1");
                                    packageFile.Update();
                                }
                                catch (Exception ex)
                                {
                                    logToHistoryListActivity1.HistoryDescription = ex.Message + FormatPackageURL(myWeb.Url, recipientCode, districtName, movingPackageFileName);
                                    logToHistoryListActivity1.HistoryOutcome = "Помилка обробки файлу (" + debugLine + ")";
                                }
                            }
                        }
                        else
                        {
                            logToHistoryListActivity1.HistoryDescription = "Файл квитанції повинен містити назву транспортного файлу";
                            logToHistoryListActivity1.HistoryOutcome = "Помилка обробки файлу";
                        }
                    }
                    // Packages
                    else if (movingFile.Name.Substring(23, 1).ToLower() == "t" && movingFile.Name.Substring(5, 4) == "0000")
                    {
                        try
                        {
                            string senderCode = movingFile.Name.Substring(0, 4);
                            string districtName = GetDistrictName(senderCode);
                            if (!string.IsNullOrEmpty(districtName) && districtName != "")
                            {
                                movingFile.MoveTo(FormatPackageURL(myWeb.Url, senderCode, districtName, movingFile.Name, false), true);
                            }
                            movingFile.CopyTo(myWeb.Url + "/Doclib00/Вхідні/" + movingFile.Name, true);
                        }
                        catch (Exception ex)
                        {
                            logToHistoryListActivity1.HistoryDescription = ex.Message;
                            logToHistoryListActivity1.HistoryOutcome = "Помилка обробки файлу";
                        }
                    }
                }
                else
                {
                    logToHistoryListActivity1.HistoryDescription = "Файл повинен містити код відділення";
                    logToHistoryListActivity1.HistoryOutcome = "Невірний формат файлу";
                }
            }
        }
        private bool IsCorrectFileName(string FileName)
        {
            int regionCode;
            if (FileName.Length > 25 && int.TryParse(FileName.Substring(5, 4), out regionCode)
                    && ConfigurationManager.AppSettings["CorrectFormats"].Contains(FileName.Substring(23, 3)))
                return true;
            else
                return false;
        }
        private string GetDistrictName(string RegionCode)
        {
            string districtURL = "";
            using (SqlConnection conn = new SqlConnection(UniConConnectionString))
            {
                SqlCommand cmd = new SqlCommand("SELECT Name FROM v_get_all_actual_dic_fssnv_unit WHERE (Code = '" + RegionCode + "')", conn);
                try
                {
                    conn.Open();
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        int counter = 0;
                        while (reader.Read())
                        {
                            districtURL = reader["Name"].ToString();
                            counter++;
                        }
                        if (counter > 1)
                            logToHistoryListActivity1.HistoryDescription = "Код відділеняя не є унікальним. Перевірте словник регіональних відділень";
                    }
                    else
                    {
                        logToHistoryListActivity1.HistoryDescription = "Перевірте наявність запису про відділення в словнику регіональних відділень";
                        logToHistoryListActivity1.HistoryOutcome = "Відділення з таким кодом не існує";
                    }
                    conn.Close();
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                finally
                {
                    if (conn.State != ConnectionState.Closed)
                        conn.Close();
                }
            }
            return districtURL;
        }
        private string FormatTicketURL(string webUrl, string regionCode, string districtName, string fileName)
        {
            return webUrl + "/DocLib" + regionCode.Substring(0, 2) + "/" + districtName + "/Квитанції/" + fileName;
        }
        private string FormatPackageURL(string webUrl, string regionCode, string districtName, string fileName, bool input)
        {
            if (input)
            {
                return webUrl + "/DocLib" + regionCode.Substring(0, 2) + "/" + districtName + "/Оброблені/" + fileName;
            }
            else
            {
                return webUrl + "/DocLib" + regionCode.Substring(0, 2) + "/" + districtName + "/Надіслані/" + fileName;
            }
        }
        private string FormatPackageURL(string webUrl, string regionCode, string districtName, string fileName)
        {
            return webUrl + "/DocLib" + regionCode.Substring(0, 2) + "/" + districtName + "/Вхідні/" + fileName;
        }
    }
}
